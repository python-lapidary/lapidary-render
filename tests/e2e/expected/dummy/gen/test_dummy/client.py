# This file is automatically @generated by Lapidary and should not be changed by hand.


__all__ = [
    'ApiClient',
]

from collections.abc import Awaitable

import typing_extensions as typing
from lapidary.runtime import *

import test_dummy.components.schemas.all.schema
import test_dummy.components.schemas.schema1.schema
import test_dummy.paths.u_ltestu_l.get.parameters.u_n.schema.schema


class ApiClient(ClientBase):
    def __init__(
        self,
        *,
        base_url: str = '/',
        **kwargs,
    ):
        super().__init__(
            base_url=base_url,
            security=[{'oauth-refresh': ['read', 'write']}, {'oauth': ['read', 'write']}, {'api-key': []}, {'api-key-cookie': []}, {'api-key-query': []}, {'http_basic': []}, {'http_digest': []}],
            **kwargs,
        )

    async def __aenter__(self) -> 'ApiClient':
        await super().__aenter__()
        return self

    async def __aexit__(self, __exc_type=None, __exc_value=None, __traceback=None) -> typing.Optional[bool]:
        return await super().__aexit__(__exc_type, __exc_value, __traceback)

    @get('/test/')
    async def test_op(
        self: typing.Self,
        *,
        param1_q: typing.Annotated[test_dummy.components.schemas.schema1.schema.schema1, Query('param1', )],
        param2_q: typing.Annotated[test_dummy.paths.u_ltestu_l.get.parameters.u_n.schema.schema.schema, Query('param2', )],
    ) -> typing.Annotated[
        Awaitable[test_dummy.components.schemas.all.schema.all],
        Responses({
            'default': {
                'application/json': test_dummy.components.schemas.all.schema.all,
            },
        })
    ]:
        pass
