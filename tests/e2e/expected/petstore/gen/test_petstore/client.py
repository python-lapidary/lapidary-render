# This file is automatically @generated by Lapidary and should not be changed by hand.


__all__ = [
    'ApiClient',
]

from collections.abc import Awaitable

import typing_extensions as typing
from lapidary.runtime import *

import test_petstore.components.schemas.ApiResponse.schema
import test_petstore.components.schemas.Order.schema
import test_petstore.components.schemas.Pet.schema
import test_petstore.components.schemas.User.schema
import test_petstore.paths.u_lstoreu_linventory.get.responses.u_o00.content.applicationu_ljson.schema.schema


class ApiClient(ClientBase):
    def __init__(
        self,
        *,
        base_url: str = 'https://petstore3.swagger.io/api/v3',
        **kwargs,
    ):
        super().__init__(
            base_url=base_url,
            **kwargs,
        )

    async def __aenter__(self) -> 'ApiClient':
        await super().__aenter__()
        return self

    async def __aexit__(self, __exc_type=None, __exc_value=None, __traceback=None) -> typing.Optional[bool]:
        return await super().__aexit__(__exc_type, __exc_value, __traceback)

    @put('/pet', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def updatePet(
        self: typing.Self,
        request_body: typing.Annotated[
            test_petstore.components.schemas.Pet.schema.Pet,
            RequestBody({
                'application/json': test_petstore.components.schemas.Pet.schema.Pet,
            }),
        ],
    ) -> typing.Annotated[
        Awaitable[test_petstore.components.schemas.Pet.schema.Pet],
        Responses({
            '200': {
                'application/json': test_petstore.components.schemas.Pet.schema.Pet,
            },
            '400': {
            },
            '404': {
            },
            '405': {
            },
        })
    ]:
        pass

    @post('/pet', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def addPet(
        self: typing.Self,
        request_body: typing.Annotated[
            test_petstore.components.schemas.Pet.schema.Pet,
            RequestBody({
                'application/json': test_petstore.components.schemas.Pet.schema.Pet,
            }),
        ],
    ) -> typing.Annotated[
        Awaitable[test_petstore.components.schemas.Pet.schema.Pet],
        Responses({
            '200': {
                'application/json': test_petstore.components.schemas.Pet.schema.Pet,
            },
            '405': {
            },
        })
    ]:
        pass

    @get('/pet/findByStatus', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def findPetsByStatus(
        self: typing.Self,
        *,
        status_q: typing.Annotated[typing.Union[None, str], Query('status', explode=True,)] = None,
    ) -> typing.Annotated[
        Awaitable[list[test_petstore.components.schemas.Pet.schema.Pet]],
        Responses({
            '200': {
                'application/json': list[test_petstore.components.schemas.Pet.schema.Pet],
            },
            '400': {
            },
        })
    ]:
        pass

    @get('/pet/findByTags', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def findPetsByTags(
        self: typing.Self,
        *,
        tags_q: typing.Annotated[typing.Union[None, list[str]], Query('tags', explode=True,)] = None,
    ) -> typing.Annotated[
        Awaitable[list[test_petstore.components.schemas.Pet.schema.Pet]],
        Responses({
            '200': {
                'application/json': list[test_petstore.components.schemas.Pet.schema.Pet],
            },
            '400': {
            },
        })
    ]:
        pass

    @get('/pet/{petId}', security=[{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}])
    async def getPetById(
        self: typing.Self,
        *,
        petId_p: typing.Annotated[int, Path('petId', )],
    ) -> typing.Annotated[
        Awaitable[test_petstore.components.schemas.Pet.schema.Pet],
        Responses({
            '200': {
                'application/json': test_petstore.components.schemas.Pet.schema.Pet,
            },
            '400': {
            },
            '404': {
            },
        })
    ]:
        pass

    @post('/pet/{petId}', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def updatePetWithForm(
        self: typing.Self,
        *,
        petId_p: typing.Annotated[int, Path('petId', )],
        name_q: typing.Annotated[typing.Union[None, str], Query('name', )] = None,
        status_q: typing.Annotated[typing.Union[None, str], Query('status', )] = None,
    ) -> typing.Annotated[
        Awaitable[None],
        Responses({
            '405': {
            },
        })
    ]:
        pass

    @delete('/pet/{petId}', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def deletePet(
        self: typing.Self,
        *,
        petId_p: typing.Annotated[int, Path('petId', )],
        api_key_h: typing.Annotated[typing.Union[None, str], Header('api_key', )] = None,
    ) -> typing.Annotated[
        Awaitable[None],
        Responses({
            '400': {
            },
        })
    ]:
        pass

    @post('/pet/{petId}/uploadImage', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def uploadFile(
        self: typing.Self,
        *,
        petId_p: typing.Annotated[int, Path('petId', )],
        additionalMetadata_q: typing.Annotated[typing.Union[None, str], Query('additionalMetadata', )] = None,
    ) -> typing.Annotated[
        Awaitable[test_petstore.components.schemas.ApiResponse.schema.ApiResponse],
        Responses({
            '200': {
                'application/json': test_petstore.components.schemas.ApiResponse.schema.ApiResponse,
            },
        })
    ]:
        pass

    @get('/store/inventory', security=[{'api_key': []}])
    async def getInventory(
        self: typing.Self,
    ) -> typing.Annotated[
        Awaitable[test_petstore.paths.u_lstoreu_linventory.get.responses.u_o00.content.applicationu_ljson.schema.schema.schema],
        Responses({
            '200': {
                'application/json': test_petstore.paths.u_lstoreu_linventory.get.responses.u_o00.content.applicationu_ljson.schema.schema.schema,
            },
        })
    ]:
        pass

    @post('/store/order')
    async def placeOrder(
        self: typing.Self,
        request_body: typing.Annotated[
            test_petstore.components.schemas.Order.schema.Order,
            RequestBody({
                'application/json': test_petstore.components.schemas.Order.schema.Order,
            }),
        ],
    ) -> typing.Annotated[
        Awaitable[test_petstore.components.schemas.Order.schema.Order],
        Responses({
            '200': {
                'application/json': test_petstore.components.schemas.Order.schema.Order,
            },
            '405': {
            },
        })
    ]:
        pass

    @get('/store/order/{orderId}')
    async def getOrderById(
        self: typing.Self,
        *,
        orderId_p: typing.Annotated[int, Path('orderId', )],
    ) -> typing.Annotated[
        Awaitable[test_petstore.components.schemas.Order.schema.Order],
        Responses({
            '200': {
                'application/json': test_petstore.components.schemas.Order.schema.Order,
            },
            '400': {
            },
            '404': {
            },
        })
    ]:
        pass

    @delete('/store/order/{orderId}')
    async def deleteOrder(
        self: typing.Self,
        *,
        orderId_p: typing.Annotated[int, Path('orderId', )],
    ) -> typing.Annotated[
        Awaitable[None],
        Responses({
            '400': {
            },
            '404': {
            },
        })
    ]:
        pass

    @post('/user')
    async def createUser(
        self: typing.Self,
        request_body: typing.Annotated[
            test_petstore.components.schemas.User.schema.User,
            RequestBody({
                'application/json': test_petstore.components.schemas.User.schema.User,
            }),
        ],
    ) -> typing.Annotated[
        Awaitable[test_petstore.components.schemas.User.schema.User],
        Responses({
            'default': {
                'application/json': test_petstore.components.schemas.User.schema.User,
            },
        })
    ]:
        pass

    @post('/user/createWithList')
    async def createUsersWithListInput(
        self: typing.Self,
        request_body: typing.Annotated[
            list[test_petstore.components.schemas.User.schema.User],
            RequestBody({
                'application/json': list[test_petstore.components.schemas.User.schema.User],
            }),
        ],
    ) -> typing.Annotated[
        Awaitable[test_petstore.components.schemas.User.schema.User],
        Responses({
            '200': {
                'application/json': test_petstore.components.schemas.User.schema.User,
            },
            'default': {
            },
        })
    ]:
        pass

    @get('/user/login')
    async def loginUser(
        self: typing.Self,
        *,
        username_q: typing.Annotated[typing.Union[None, str], Query('username', )] = None,
        password_q: typing.Annotated[typing.Union[None, str], Query('password', )] = None,
    ) -> typing.Annotated[
        Awaitable[str],
        Responses({
            '200': {
                'application/json': str,
            },
            '400': {
            },
        })
    ]:
        pass

    @get('/user/logout')
    async def logoutUser(
        self: typing.Self,
    ) -> typing.Annotated[
        Awaitable[None],
        Responses({
            'default': {
            },
        })
    ]:
        pass

    @get('/user/{username}')
    async def getUserByName(
        self: typing.Self,
        *,
        username_p: typing.Annotated[str, Path('username', )],
    ) -> typing.Annotated[
        Awaitable[test_petstore.components.schemas.User.schema.User],
        Responses({
            '200': {
                'application/json': test_petstore.components.schemas.User.schema.User,
            },
            '400': {
            },
            '404': {
            },
        })
    ]:
        pass

    @put('/user/{username}')
    async def updateUser(
        self: typing.Self,
        request_body: typing.Annotated[
            test_petstore.components.schemas.User.schema.User,
            RequestBody({
                'application/json': test_petstore.components.schemas.User.schema.User,
            }),
        ],
        *,
        username_p: typing.Annotated[str, Path('username', )],
    ) -> typing.Annotated[
        Awaitable[None],
        Responses({
            'default': {
            },
        })
    ]:
        pass

    @delete('/user/{username}')
    async def deleteUser(
        self: typing.Self,
        *,
        username_p: typing.Annotated[str, Path('username', )],
    ) -> typing.Annotated[
        Awaitable[None],
        Responses({
            '400': {
            },
            '404': {
            },
        })
    ]:
        pass
