# This file is automatically @generated by Lapidary and should not be changed by hand.


__all__ = [
    'ApiClient',
]

import typing_extensions as typing
from lapidary.runtime import *

import test_petstore.components.schemas.ApiResponse.schema
import test_petstore.components.schemas.Order.schema
import test_petstore.components.schemas.Pet.schema
import test_petstore.components.schemas.User.schema
import test_petstore.paths.u_lpetu_lu_1zpetIdu_21.delete.parameters.meta
import test_petstore.paths.u_lstoreu_linventory.get.responses.u_o00.content.applicationu_ljson.schema.schema
import test_petstore.paths.u_luseru_llogin.get.responses.u_o00.headers


class ApiClient(ClientBase):
    def __init__(
        self,
        *,
        base_url: str = 'https://petstore3.swagger.io/v3',
        **kwargs,
    ) -> None:
        super().__init__(
            base_url=base_url,
            **kwargs,
        )

    @post('/pet', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def addPet(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.Pet.schema.Pet,
            Body({
                'application/json': test_petstore.components.schemas.Pet.schema.Pet,
            }),
        ],
    ) -> typing.Annotated[
        tuple[test_petstore.components.schemas.Pet.schema.Pet, None],
        Responses({
            '200': Response(
                Body({
                    'application/json': test_petstore.components.schemas.Pet.schema.Pet,
                }),
            ),
            '405': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @put('/pet', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def updatePet(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.Pet.schema.Pet,
            Body({
                'application/json': test_petstore.components.schemas.Pet.schema.Pet,
            }),
        ],
    ) -> typing.Annotated[
        tuple[test_petstore.components.schemas.Pet.schema.Pet, None],
        Responses({
            '200': Response(
                Body({
                    'application/json': test_petstore.components.schemas.Pet.schema.Pet,
                }),
            ),
            '400': Response(
                Body({
                }),
            ),
            '404': Response(
                Body({
                }),
            ),
            '405': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @get('/pet/findByStatus', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def findPetsByStatus(
        self: typing.Self,
        *,
        status_q: typing.Annotated[typing.Union[None, str], Query('status', style=FormExplode,)] = None,
    ) -> typing.Annotated[
        tuple[list[test_petstore.components.schemas.Pet.schema.Pet], None],
        Responses({
            '200': Response(
                Body({
                    'application/json': list[test_petstore.components.schemas.Pet.schema.Pet],
                }),
            ),
            '400': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @get('/pet/findByTags', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def findPetsByTags(
        self: typing.Self,
        *,
        tags_q: typing.Annotated[typing.Union[None, list[str]], Query('tags', style=FormExplode,)] = None,
    ) -> typing.Annotated[
        tuple[list[test_petstore.components.schemas.Pet.schema.Pet], None],
        Responses({
            '200': Response(
                Body({
                    'application/json': list[test_petstore.components.schemas.Pet.schema.Pet],
                }),
            ),
            '400': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @get('/pet/{petId}', security=[{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}])
    async def getPetById(
        self: typing.Self,
        *,
        petId_p: typing.Annotated[int, Path('petId', )],
    ) -> typing.Annotated[
        tuple[test_petstore.components.schemas.Pet.schema.Pet, None],
        Responses({
            '200': Response(
                Body({
                    'application/json': test_petstore.components.schemas.Pet.schema.Pet,
                }),
            ),
            '400': Response(
                Body({
                }),
            ),
            '404': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @post('/pet/{petId}', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def updatePetWithForm(
        self: typing.Self,
        *,
        petId_p: typing.Annotated[int, Path('petId', )],
        name_q: typing.Annotated[typing.Union[None, str], Query('name', )] = None,
        status_q: typing.Annotated[typing.Union[None, str], Query('status', )] = None,
    ) -> typing.Annotated[
        None,
        Responses({
            '405': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @delete('/pet/{petId}', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def deletePet(
        self: typing.Self,
        *,
        petId_p: typing.Annotated[int, Path('petId', )],
        meta: typing.Annotated[typing.Union[None, test_petstore.paths.u_lpetu_lu_1zpetIdu_21.delete.parameters.meta.RequestMetadata], Metadata()] = None,
    ) -> typing.Annotated[
        None,
        Responses({
            '400': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @post('/pet/{petId}/uploadImage', security=[{'petstore_auth': ['write:pets', 'read:pets']}])
    async def uploadFile(
        self: typing.Self,
        *,
        petId_p: typing.Annotated[int, Path('petId', )],
        additionalMetadata_q: typing.Annotated[typing.Union[None, str], Query('additionalMetadata', )] = None,
    ) -> typing.Annotated[
        tuple[test_petstore.components.schemas.ApiResponse.schema.ApiResponse, None],
        Responses({
            '200': Response(
                Body({
                    'application/json': test_petstore.components.schemas.ApiResponse.schema.ApiResponse,
                }),
            ),
        })
    ]:
        pass

    @get('/store/inventory', security=[{'api_key': []}])
    async def getInventory(
        self: typing.Self,
    ) -> typing.Annotated[
        tuple[test_petstore.paths.u_lstoreu_linventory.get.responses.u_o00.content.applicationu_ljson.schema.schema.schema, None],
        Responses({
            '200': Response(
                Body({
                    'application/json': test_petstore.paths.u_lstoreu_linventory.get.responses.u_o00.content.applicationu_ljson.schema.schema.schema,
                }),
            ),
        })
    ]:
        pass

    @post('/store/order')
    async def placeOrder(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.Order.schema.Order,
            Body({
                'application/json': test_petstore.components.schemas.Order.schema.Order,
            }),
        ],
    ) -> typing.Annotated[
        tuple[test_petstore.components.schemas.Order.schema.Order, None],
        Responses({
            '200': Response(
                Body({
                    'application/json': test_petstore.components.schemas.Order.schema.Order,
                }),
            ),
            '405': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @get('/store/order/{orderId}')
    async def getOrderById(
        self: typing.Self,
        *,
        orderId_p: typing.Annotated[int, Path('orderId', )],
    ) -> typing.Annotated[
        tuple[test_petstore.components.schemas.Order.schema.Order, None],
        Responses({
            '200': Response(
                Body({
                    'application/json': test_petstore.components.schemas.Order.schema.Order,
                }),
            ),
            '400': Response(
                Body({
                }),
            ),
            '404': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @delete('/store/order/{orderId}')
    async def deleteOrder(
        self: typing.Self,
        *,
        orderId_p: typing.Annotated[int, Path('orderId', )],
    ) -> typing.Annotated[
        None,
        Responses({
            '400': Response(
                Body({
                }),
            ),
            '404': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @post('/user')
    async def createUser(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.User.schema.User,
            Body({
                'application/json': test_petstore.components.schemas.User.schema.User,
            }),
        ],
    ) -> typing.Annotated[
        tuple[test_petstore.components.schemas.User.schema.User, None],
        Responses({
            'default': Response(
                Body({
                    'application/json': test_petstore.components.schemas.User.schema.User,
                }),
            ),
        })
    ]:
        pass

    @post('/user/createWithList')
    async def createUsersWithListInput(
        self: typing.Self,
        body: typing.Annotated[
            list[test_petstore.components.schemas.User.schema.User],
            Body({
                'application/json': list[test_petstore.components.schemas.User.schema.User],
            }),
        ],
    ) -> typing.Annotated[
        typing.Union[tuple[None, None], tuple[test_petstore.components.schemas.User.schema.User, None]],
        Responses({
            '200': Response(
                Body({
                    'application/json': test_petstore.components.schemas.User.schema.User,
                }),
            ),
            'default': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @get('/user/login')
    async def loginUser(
        self: typing.Self,
        *,
        username_q: typing.Annotated[typing.Union[None, str], Query('username', )] = None,
        password_q: typing.Annotated[typing.Union[None, str], Query('password', )] = None,
    ) -> typing.Annotated[
        tuple[str, test_petstore.paths.u_luseru_llogin.get.responses.u_o00.headers.ResponseMetadata],
        Responses({
            '200': Response(
                Body({
                    'application/json': str,
                }),
                test_petstore.paths.u_luseru_llogin.get.responses.u_o00.headers.ResponseMetadata
            ),
            '400': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @get('/user/logout')
    async def logoutUser(
        self: typing.Self,
    ) -> typing.Annotated[
        tuple[None, None],
        Responses({
            'default': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @get('/user/{username}')
    async def getUserByName(
        self: typing.Self,
        *,
        username_p: typing.Annotated[str, Path('username', )],
    ) -> typing.Annotated[
        tuple[test_petstore.components.schemas.User.schema.User, None],
        Responses({
            '200': Response(
                Body({
                    'application/json': test_petstore.components.schemas.User.schema.User,
                }),
            ),
            '400': Response(
                Body({
                }),
            ),
            '404': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @put('/user/{username}')
    async def updateUser(
        self: typing.Self,
        body: typing.Annotated[
            test_petstore.components.schemas.User.schema.User,
            Body({
                'application/json': test_petstore.components.schemas.User.schema.User,
            }),
        ],
        *,
        username_p: typing.Annotated[str, Path('username', )],
    ) -> typing.Annotated[
        tuple[None, None],
        Responses({
            'default': Response(
                Body({
                }),
            ),
        })
    ]:
        pass

    @delete('/user/{username}')
    async def deleteUser(
        self: typing.Self,
        *,
        username_p: typing.Annotated[str, Path('username', )],
    ) -> typing.Annotated[
        None,
        Responses({
            '400': Response(
                Body({
                }),
            ),
            '404': Response(
                Body({
                }),
            ),
        })
    ]:
        pass
